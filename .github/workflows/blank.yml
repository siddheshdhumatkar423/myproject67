name: CI/CD Pipeline - Netflix Clone

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Analyze
    runs-on: ubuntu-latest

    env:
      TMDB_V3_API_KEY: ${{ secrets.TMDB_V3_API_KEY }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install

      - name: SonarQube Analysis
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.projectKey=Netflix
            -Dsonar.projectName=Netflix
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: 'http://<SONARQUBE_SERVER>:9000'

      - name: Wait for Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "Netflix Clone"
          format: "HTML"
          out: "reports"
          args: "--scan ./ --disableYarnAudit --disableNodeAudit"

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-report
          path: reports

      - name: Trivy FS Scan
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy fs . > trivyfs.txt

      - name: Docker Login
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Docker Build and Push
        run: |
          docker build --build-arg TMDB_V3_API_KEY=$TMDB_V3_API_KEY -t netflix .
          docker tag netflix $DOCKERHUB_USERNAME/netflix:latest
          docker push $DOCKERHUB_USERNAME/netflix:latest

      - name: Trivy Image Scan
        run: trivy image $DOCKERHUB_USERNAME/netflix:latest > trivyimage.txt

      - name: Upload Trivy Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivyfs.txt
            trivyimage.txt

  deploy:
    name: Deploy to Docker (optional)
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Pull and Run Docker Container
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/netflix:latest
          docker run -d --name netflix -p 8081:80 ${{ secrets.DOCKERHUB_USERNAME }}/netflix:latest

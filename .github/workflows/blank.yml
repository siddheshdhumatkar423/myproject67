name: CI-CD for Netflix Clone

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 16

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '17'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm install

    - name: SonarQube Scan
      run: |
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
        unzip sonar-scanner-cli-5.0.1.3006-linux.zip
        ./sonar-scanner-*/bin/sonar-scanner \
          -Dsonar.projectKey=Netflix \
          -Dsonar.sources=. \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ env.SONAR_TOKEN }}

    - name: Create output directory for Dependency Check report
      run: mkdir -p dependency-check-report

    - name: Pull OWASP Dependency-Check DB (updateonly)
      run: |
        docker volume create owasp-data
        docker run --rm -v owasp-data:/usr/share/dependency-check/data owasp/dependency-check:latest --updateonly

    - name: Run OWASP Dependency Check
      run: |
        docker run --rm \
          -v owasp-data:/usr/share/dependency-check/data \
          -v ${{ github.workspace }}:/src \
          owasp/dependency-check:latest \
          --project "Netflix" \
          --scan /src \
          --format "ALL" \
          --out /src/dependency-check-report \
          --failOnCVSS 11.0 || true

    - name: Upload Dependency Check Report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: dependency-check-report

    - name: Run Trivy FS Scan
      run: |
        docker run --rm -v $(pwd):/project aquasec/trivy fs /project > trivyfs.txt

    - name: Upload Trivy FS Scan Report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-fs-report
        path: trivyfs.txt

    - name: Build Docker Image
      run: |
        docker build \
          --build-arg TMDB_V3_API_KEY=${{ env.TMDB_API_KEY }} \
          -t netflix .

    - name: Log in to DockerHub
      run: echo "${{ env.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_USERNAME }}" --password-stdin

    - name: Push Docker Image
      run: |
        docker tag netflix ${{ env.DOCKER_USERNAME }}/netflix:latest
        docker push ${{ env.DOCKER_USERNAME }}/netflix:latest

    - name: Trivy Image Scan
      run: |
        docker run --rm aquasec/trivy image ${{ env.DOCKER_USERNAME }}/netflix:latest > trivyimage.txt

    - name: Upload Trivy Image Report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-image-report
        path: trivyimage.txt

    - name: Deploy to Kubernetes (SCP)
      uses: appleboy/scp-action@v0.0.1
      with:
        host: ${{ secrets.K8S_MASTER_IP }}
        username: ${{ secrets.K8S_USER }}
        key: ${{ secrets.K8S_PRIVATE_KEY }}
        source: "./k8s/*"
        target: "/tmp"

    - name: Apply Kubernetes Manifests (SSH)
      uses: appleboy/ssh-action@v0.1.0
      with:
        host: ${{ secrets.K8S_MASTER_IP }}
        username: ${{ secrets.K8S_USER }}
        key: ${{ secrets.K8S_PRIVATE_KEY }}
        script: |
          kubectl apply -f /tmp/deployment.yml
          kubectl apply -f /tmp/service.yml
